This README file contains information on the contents of the meta-pcbd-ast layer.

Build process:
  $ repo init -u https://gitea.pcbdesign.hu/bkardos/meta-pcbd-ast -b dev-honister
  $ repo sync
  $ cd obmc-pcbd
  $ . setup pcb486-ast2500
  $ bitbake obmc-phosphor-image

Copy 32MB flash image to TFTP server folder:
  $ cd tmp/deploy/images/pcb486-ast2500
  $ sudo cp -L flash-pcb486-ast2500 /srv/tftp/

Copy kernel only to TFTP folder:
  $ sudo cp -L image-kernel /srv/tftp/


Modify U-Boot to boot from TFTP server:
  - break U-Boot autoboot by pressing a key
    # setenv bootcmd dhcp image-kernel\; bootm
    # saveenv
    # reset

Overwriting U-Boot partition only:
  - break U-Boot autoboot by pressing a key
    # dhcp
    # tftp 0x83000000 flash-pcb486-ast2500
    # protect off all
    # erase 0x20000000 0x2007ffff
    # cp.l 0x83000000 0x20000000 0x20000

Overwriting everything but U-Boot partition:
    # dhcp
    # tftp 0x83000000 flash-pcb486-ast2500
    # erase 0x20080000 0x21ffffff
    # cp.l 0x83080000 0x20080000 0x7e0000

Boot from NFS
If U-Boot can't handle eth0 but kernel can, it is possible to boot kernel from
flash, and mount rootfs from NFS.
Build kernel and copy fitImage-pcb486-ast2500.bin to a running pcb486-ast2500 instance.
Then:
    # dd if=fitImage-pcb486-ast2500.bin bs=1M of=/dev/mtdblock3 && sync && /sbin/reboot
  - break U-Boot autoboot by pressing a key
    # setenv bootargs console=ttyS4,115200n8 root=/dev/nfs rw nfsroot=10.42.0.1:/srv/nfs/pcb486-ast2500,vers=3 ip=dhcp
    # saveenv
    # reset
  - host must be 10.42.0.1, DHCP server must run
  - rootfs must be at /srv/nfs/pcb486-ast2500

Reverting to flash-based boot:
  - copy flash-pcb486-ast2500 to /home/root/ folder of NFS rootfs
    # dd if=flash-pcb486-ast2500 bs=1M of=/dev/mtdblock0 && sync && /sbin/reboot
 
