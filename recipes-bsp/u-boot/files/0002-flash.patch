diff -Naurw ./arch/arm/mach-aspeed/flash.c ../git/arch/arm/mach-aspeed/flash.c
--- ./arch/arm/mach-aspeed/flash.c	2022-03-09 14:35:35.174647986 +0100
+++ ../git/arch/arm/mach-aspeed/flash.c	2022-03-09 14:38:33.895400968 +0100
@@ -69,11 +69,13 @@
 #define S25FL064A		0x160201
 #define S25FL128P		0x182001
 #define S25FL256S		0x190201
+#define S25FL256L		0x196001
 #define W25X16			0x1530ef
 #define W25X64			0x1730ef
 #define W25Q64BV		0x1740ef
 #define W25Q128BV		0x1840ef
 #define W25Q256FV		0x1940ef
+#define W25Q01JV		0x2140ef
 #define MX25L1605D		0x1520C2
 #define MX25L12805D		0x1820C2
 #define MX25L25635E		0x1920C2
@@ -328,6 +330,7 @@
 			break;
 	}
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	//base = info->start[0];
 	base = (ulong) flash_make_addr(info, 0, 0);
 
@@ -365,10 +368,12 @@
 
 	//base = info->start[0];
 	base = (ulong) flash_make_addr(info, 0, 0);
+    printf( "**** %s %i   base: 0x%08x   reg_base: 0x%08x\n", __func__, __LINE__, base, info->reg_base );
 
 	/* Enable 4B: BAR0 D[7] = 1 */
 	ulCtrlData  = (info->tCK_Write << 8);
 	ulCtrlData |= CE_LOW | USERMODE;
+    printf( "**** %s %i   base: 0x%08x   reg_base: 0x%08x\n", __func__, __LINE__, base, info->reg_base );
 	*(ulong *) (info->reg_base + CtrlOffset) = ulCtrlData;
 	udelay(200);
 	*(uchar *) (base) = (uchar) (0x17);
@@ -416,6 +421,7 @@
 
 	//base = info->start[0];
 	base = (ulong) flash_make_addr(info, 0, 0);
+    printf( "**** %s %i   base: 0x%08x   reg_base: 0x%08x\n", __func__, __LINE__, base, info->reg_base );
 
 	/* Enable Write */
 	enable_write (info);
@@ -786,7 +792,7 @@
 	ulID = ((ulong)ch[0]) | ((ulong)ch[1] << 8) | ((ulong)ch[2] << 16) ;
 	info->flash_id = ulID;
 
-//	printf("SPI Flash ID: %x \n", ulID);
+	printf("SPI Flash ID: %x \n", ulID);
 
 	/* init default */
 	info->iomode = IOMODEx1;
@@ -976,6 +982,20 @@
 #endif
 			break;
 
+		case S25FL256L:
+			info->sector_count = 512;
+			info->size = 0x2000000;
+			erase_region_size  = 0x10000;
+			info->readcmd = 0x0b;
+			info->dualport = 0;
+			info->dummybyte = 1;
+			info->buffersize = 256;
+			WriteClk = 50;
+			EraseClk = 20;
+			ReadClk  = 50;
+			info->address32 = 1;
+			break;
+
 		case MX25L25635E:
 			info->sector_count = 256;
 			info->size = 0x1000000;
@@ -1186,6 +1206,20 @@
 			info->address32 = 1;
 			break;
 
+		case W25Q01JV:
+			info->sector_count = 2048;
+			info->size = 0x8000000;
+			erase_region_size  = 0x10000;
+			info->readcmd = 0x0b;
+			info->dualport = 0;
+			info->dummybyte = 1;
+			info->buffersize = 256;
+			WriteClk = 50;
+			EraseClk = 20;
+			ReadClk  = 50;
+			info->address32 = 1;
+			break;
+
 		default:	/* use JEDEC ID */
 			printf("Unsupported SPI Flash!! 0x%08lx\n", info->flash_id);
 			erase_region_size  = 0x10000;
@@ -1314,6 +1348,7 @@
 			} /* JDEC */
 	}
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	sector = base;
 	for (j = 0; j < info->sector_count; j++) {
 
@@ -1322,21 +1357,26 @@
 		info->protect[j] = 0; /* default: not protected */
 	}
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	/* limit Max SPI CLK to 50MHz (Datasheet v1.2) */
 	if (WriteClk > 50) WriteClk = 50;
 	if (EraseClk > 50) EraseClk = 50;
 	if (ReadClk > 50)  ReadClk  = 50;
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	info->tCK_Write = ast_spi_calculate_divisor(WriteClk*1000000);
 	info->tCK_Erase = ast_spi_calculate_divisor(EraseClk*1000000);
 	info->tCK_Read = ast_spi_calculate_divisor(ReadClk*1000000);
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	/* unprotect flash */
 	write_status_register(info, 0);
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	if (info->quadport)
 		write_status_register(info, 0x40);	/* enable QE */
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	if (info->address32) {
 #ifndef AST_SOC_G5
 		reg = *((volatile ulong*) 0x1e6e2070);	/* set H/W Trappings */
@@ -1347,17 +1387,21 @@
 		reg |= (0x01 << info->CE);
 		*((volatile ulong*) (info->reg_base + 0x4)) = reg;
 
+		printf( "**** %s %i\n", __func__, __LINE__ );
 		/* set flash chips to 32bits addressing mode */
-		if ((info->flash_id & 0xFF) == 0x01)	/* Spansion */
+		if (((info->flash_id & 0xFF) == 0x01) &&	/* Spansion */
+			(info->flash_id != S25FL256L))
 			enable4b_spansion(info);
-		else if ((info->flash_id & 0xFF) == 0x20)	/* Numonyx */
+		else if (((info->flash_id & 0xFF) == 0x20) ||	/* Numonyx */
+				 (info->flash_id == S25FL256L))
 			enable4b_numonyx(info);
 		else /* MXIC, Winbond */
 			enable4b(info);
 	}
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	reset_flash(info);
-//	printf("%08x \n", info->size);
+	printf("%08x \n", info->size);
 	return (info->size);
 }
 
@@ -1367,6 +1411,7 @@
 	unsigned long size = 0;
 	int i;
 
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	*((volatile ulong*) AST_FMC_BASE) |= 0x800f0000;	/* enable Flash Write */
 
 	/* Init: FMC  */
@@ -1376,12 +1421,15 @@
 		flash_info[i].reg_base = AST_FMC_BASE;
 		flash_info[i].flash_id = FLASH_UNKNOWN;
 		flash_info[i].CE = i;
+		printf( "**** %s %i\n", __func__, __LINE__ );
 		switch(i) {
 			case 0:
 				size += flash_info[i].size = flash_get_size(AST_FMC_CS0_BASE, &flash_info[i]);
+				printf( "**** %s %i   size: %i\n", __func__, __LINE__, (int )size );
 				break;
 			case 1:
 				size += flash_info[i].size = flash_get_size(AST_FMC_CS1_BASE, &flash_info[i]);
+				printf( "**** %s %i   size: %i\n", __func__, __LINE__, (int )size );
 				break;
 			default:
 				printf("TODO ~~~~ \n");
@@ -1395,6 +1443,7 @@
 
 	/* BANK 2:SYSSPI CS0 */
 #ifdef CONFIG_SPI0_CS
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	//pin switch by trap[13:12]	-- [0:1] Enable SPI Master
 	ast_scu_spi_master(1);	/* enable SPI master */
 	*((volatile ulong*) AST_FMC_SPI0_BASE) |= 0x10000;	/* enable Flash Write */
@@ -1411,6 +1460,7 @@
 
 	/* Monitor protection ON by default */
 #if (CONFIG_MONITOR_BASE >= AST_FMC_CS0_BASE)
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	flash_protect (FLAG_PROTECT_SET,
 		       CONFIG_MONITOR_BASE,
 		       CONFIG_MONITOR_BASE + monitor_flash_len  - 1,
@@ -1419,6 +1469,7 @@
 
 	/* Environment protection ON by default */
 #ifdef CONFIG_ENV_IS_IN_FLASH
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	flash_protect (FLAG_PROTECT_SET,
 		       CONFIG_ENV_ADDR,
 		       CONFIG_ENV_ADDR + CONFIG_ENV_SECT_SIZE - 1,
@@ -1427,6 +1478,7 @@
 
 	/* Redundant environment protection ON by default */
 #ifdef CONFIG_ENV_ADDR_REDUND
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	flash_protect (FLAG_PROTECT_SET,
 		       CONFIG_ENV_ADDR_REDUND,
 		       CONFIG_ENV_ADDR_REDUND + CONFIG_ENV_SIZE_REDUND - 1,
@@ -1434,9 +1486,11 @@
 #endif
 
 #ifdef CONFIG_FLASH_CFI_MTD
+    printf( "**** %s %i\n", __func__, __LINE__ );
 	cfi_mtd_init();
 #endif
 
+    printf( "**** %s %i   size: %i\n", __func__, __LINE__, (int )size );
 	return (size);
 }
 
